
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###͏︍͏︆͏󠄁
#################################################
# file to edit: notebook.ipynb͏︍͏︆͏󠄁

import time
from isolation import Board

# Credits if any͏︍͏︆͏󠄁
# 1)͏︍͏︆͏󠄁
# 2)͏︍͏︆͏󠄁
# 3)͏︍͏︆͏󠄁

class OpenMoveEvalFn:
    def score(self, game, my_player=None):
        """Score the current game state
        Evaluation function that outputs a score equal to how many
        moves are open for AI player on the board minus how many moves
        are open for Opponent's player on the board.

        Note:
            If you think of better evaluation function, do it in CustomEvalFn below.

            Args
                game (Board): The board and game state.
                my_player (Player object): This specifies which player you are.

            Returns:
                float: The current state's score. MyMoves-OppMoves.

            """

        # TODO: finish this function!͏︍͏︆͏󠄁
        my_moves = game.get_player_moves(my_player)
        opp_moves = game.get_opponent_moves(my_player)
        #print(my_moves)
        #print(opp_moves)
        return len(my_moves) - len(opp_moves)


        raise NotImplementedError


######################################################################
########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
######## IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ############͏︍͏︆͏󠄁
######################################################################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

class CustomPlayer:
    # TODO: finish this class!͏︍͏︆͏󠄁
    """Player that chooses a move using your evaluation function
    and a minimax algorithm with alpha-beta pruning.
    You must finish and test this player to make sure it properly
    uses minimax and alpha-beta to return a good move."""

    def __init__(self, search_depth=4, eval_fn=OpenMoveEvalFn()):
        """Initializes your player.

        if you find yourself with a superior eval function, update the default
        value of `eval_fn` to `CustomEvalFn()`

        Args:
            search_depth (int): The depth to which your agent will search
            eval_fn (function): Evaluation function used by your agent
        """
        self.eval_fn = eval_fn
        self.search_depth = search_depth

    def move(self, game, time_left):
        """Called to determine one move by your agent

        Note:
            1. Do NOT change the name of this 'move' function. We are going to call
            this function directly.
            2. Call alphabeta instead of minimax once implemented.
        Args:
            game (Board): The board and game state.
            time_left (function): Used to determine time left before timeout

        Returns:
            tuple: (int,int): Your best move
        """

        best_move, utility = alphabeta(self, game, time_left, depth=self.search_depth)
        #def alphabeta(player, game, time_left, depth, alpha=float("-inf"), beta=float("inf"), my_turn=True):

        return best_move



    def utility(self, game, my_turn):
        """You can handle special cases here (e.g. endgame)"""

        return self.eval_fn.score(game, self)



###################################################################
########## DON'T WRITE ANY CODE OUTSIDE THE CLASS! ################͏︍͏︆͏󠄁
###### IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ###########͏︍͏︆͏󠄁
###################################################################


def minimax(player, game, time_left, depth, my_turn=True):
    """Implementation of the minimax algorithm.
    Args:
        player (CustomPlayer): This is the instantiation of CustomPlayer()
            that represents your agent. It is used to call anything you
            need from the CustomPlayer class (the utility() method, for example,
            or any class variables that belong to CustomPlayer()).
        game (Board): A board and game state.
        time_left (function): Used to determine time left before timeout
        depth: Used to track how deep you are in the search tree
        my_turn (bool): True if you are computing scores during your turn.

    Returns:
        (tuple, int): best_move, val
    """

    # TODO: finish this function!͏︍͏︆͏󠄁

    best_move = None
    utility = None


    for d in range(1, depth+1):
        if (time_left()) <= 0:
            break
        candidate_best_move, candidate_utility = max_player(game, time_left, d)

        if (time_left() ) > 0 and candidate_best_move != None:
            best_move = candidate_best_move
            utility = candidate_utility
        else:
            break
        print("Depth: ", d, "Best move: ", best_move, "Utility: ", utility)

    #print(f"Best move: {best_move}")
    return (best_move, utility)

def max_player(game, time_left, depth_left):

    best_move = (None, None, None)
    v = float('-inf')

    valid_moves = get_valid_moves(game, game.get_active_player())

    heu = heuristic(game, game.get_active_player())


    if is_cutoff(time_left, depth_left):

        return None, heu

    game_over, winner = is_terminal(game, game.get_active_player())
    if game_over:
        if winner == None:
            return None, 1/2
        else:
            return None, 0


    for cur_move in valid_moves:
        if (time_left()) <= 0:
            break

        new_gameboard, game_over, winner = game.forecast_move(cur_move)
        new_move, new_v = min_player(new_gameboard, time_left, depth_left-1)
        if new_v > v:
            v = new_v
            best_move = cur_move

    return best_move, v

def min_player(game, time_left, depth_left):
    best_move = (None, None, None)
    v = float('inf')

    valid_moves = get_valid_moves(game, game.get_active_player())

    heu = heuristic(game, game.get_inactive_player())

    if is_cutoff(time_left, depth_left):

        return None, heu

    game_over, winner = is_terminal(game, game.get_active_player())
    if game_over:
        if winner == None:
            return None, 1/2
        else:
            return None, 1

    for cur_move in valid_moves:
        if (time_left()) <= 0:
            break

        new_gameboard, game_over, winner = game.forecast_move(cur_move)
        new_move, new_v = max_player(new_gameboard, time_left, depth_left-1)
        if new_v < v:
            v = new_v
            best_move = cur_move

    return best_move, v

def is_cutoff(time_left, depth_left):
    no_time = time_left() <= 0
    no_depth = depth_left <= 0

    if no_time or no_depth:
        return True
    return False

def is_terminal(game, player):

    pm = game.get_player_moves(player)
    om = game.get_opponent_moves(player)

    if len(om) == 0 and len(pm) == 0:
        return True, None
    if len(pm) == 0:
        return True, True
    return False, None


def heuristic(game, player):
    player_moves = game.get_player_moves(player)
    opponent_moves = game.get_opponent_moves(player)
    #print(f"Player moves: {len(player_moves)} -- Opponent moves: {len(opponent_moves)}")
    return len(player_moves) - len(opponent_moves)




def get_valid_moves(game, player):
    return game.get_player_moves(player)


    raise NotImplementedError

######################################################################
########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
######## IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ############͏︍͏︆͏󠄁
######################################################################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

transposition_table = {}

def alphabeta(player, game, time_left, depth, alpha=float("-inf"), beta=float("inf"), my_turn=True):
    """Implementation of the alphabeta algorithm.

    Args:
        player (CustomPlayer): This is the instantiation of CustomPlayer()
            that represents your agent. It is used to call anything you need
            from the CustomPlayer class (the utility() method, for example,
            or any class variables that belong to CustomPlayer())
        game (Board): A board and game state.
        time_left (function): Used to determine time left before timeout
        depth: Used to track how deep you are in the search tree
        alpha (float): Alpha value for pruning
        beta (float): Beta value for pruning
        my_turn (bool): True if you are computing scores during your turn.

    Returns:
        (tuple, int): best_move, val
    """

    # TODO: finish this function!͏︍͏︆͏󠄁
    global transposition_table
    transposition_table = {}

    best_move = (None, None, None)
    utility = float('-inf')

    for d in range(1, depth+1):
        if (time_left()) <= 0:
            break
        candidate_best_move, candidate_utility, _, _ = max_player(game, time_left, d, alpha, beta)
        #candidate_best_move, candidate_utility, _, _ = candidate_struct
        if (time_left() ) > 0 and candidate_best_move != None:
            best_move = candidate_best_move
            utility = candidate_utility
        else:
            break
        print("Depth: ", d, "Best move: ", best_move, "Utility: ", utility)

    return (best_move, utility)


    raise NotImplementedError


def max_player(game, time_left, depth_left, alpha, beta):
    global transposition_table

    key = (game.copy(), depth_left, 'MAX')
    if key in transposition_table:
        return transposition_table[key]

    best_move = [None, None, float('-inf'), float('inf')]
    v = float('-inf')

    valid_moves = get_valid_moves(game, game.get_active_player())

    heu = heuristic(game, game.get_active_player())

    if is_cutoff(time_left, depth_left):
        best_move[0] = None
        best_move[1] = heu
        transposition_table[key] = best_move
        return best_move

    game_over, winner = is_terminal(game, game.get_active_player())
    if game_over:
        if winner == None:
            best_move[0] = None
            best_move[1] = 1/2

            #return None, 1/2
        else:
            best_move[0] = None
            best_move[1] = 0
        transposition_table[key] = best_move
        return best_move

    for cur_move in valid_moves:
        if (time_left()) <= 0:
            break

        prev = v

        new_gameboard, game_over, winner = game.forecast_move(cur_move)
        v = max(v, min_player(new_gameboard, time_left, depth_left-1, alpha, beta)[1])
        if v > prev:
            best_move[0] = cur_move
            best_move[1] = v

        alpha = max(alpha, v)
        best_move[2] = alpha

        if beta <= alpha:
            transposition_table[key] = best_move
            return best_move

    transposition_table[key] = best_move
    return best_move

def min_player(game, time_left, depth_left, alpha, beta):
    global transposition_table

    key = (game.copy(), depth_left, 'MIN')
    if key in transposition_table:
        return transposition_table[key]

    best_move = [None, None, float('-inf'), float('inf')]
    v = float('inf')

    valid_moves = get_valid_moves(game, game.get_active_player())

    heu = heuristic(game, game.get_inactive_player())

    if is_cutoff(time_left, depth_left):
        best_move[0] = None
        best_move[1] = heu
        transposition_table[key] = best_move
        return best_move

    game_over, winner = is_terminal(game, game.get_active_player())
    if game_over:
        if winner == None:
            best_move[0] = None
            best_move[1] = 1/2

            #return None, 1/2
        else:
            best_move[0] = None
            best_move[1] = 1
        transposition_table[key] = best_move
        return best_move

    for cur_move in valid_moves:
        if (time_left()) <= 0:
            break

        prev = v

        new_gameboard, game_over, winner = game.forecast_move(cur_move)
        v = min(v, max_player(new_gameboard, time_left, depth_left-1, alpha, beta)[1])
        if v < prev:
            best_move[0] = cur_move
            best_move[1] = v

        beta = min(beta, v)
        best_move[3] = beta

        if beta <= alpha:
            transposition_table[key] = best_move
            return best_move

    transposition_table[key] = best_move
    return best_move


def is_cutoff(time_left, depth_left):
    no_time = time_left() <= 0
    no_depth = depth_left <= 0

    if no_time or no_depth:
        return True
    return False

def is_terminal(game, player):

    pm = game.get_player_moves(player)
    om = game.get_opponent_moves(player)

    if len(om) == 0 and len(pm) == 0:
        return True, None
    if len(pm) == 0:
        return True, True
    return False, None

def heuristic(game, player):
    player_moves = game.get_player_moves(player)
    opponent_moves = game.get_opponent_moves(player)
    return len(player_moves) - len(opponent_moves)


def get_valid_moves(game, player):
    return game.get_player_moves(player)

######################################################################
########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
######## IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ############͏︍͏︆͏󠄁
######################################################################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

class CustomEvalFn:
    def __init__(self):
        pass

    def score(self, game, my_player=None):
        """Score the current game state.

        Custom evaluation function that acts however you think it should. This
        is not required but highly encouraged if you want to build the best
        AI possible.

        Args:
            game (Board): The board and game state.
            my_player (Player object): This specifies which player you are.

        Returns:
            float: The current state's score, based on your own heuristic.
        """

        # TODO: finish this function!͏︍͏︆͏󠄁


        raise NotImplementedError

######################################################################
############ DON'T WRITE ANY CODE OUTSIDE THE CLASS! #################͏︍͏︆͏󠄁
######## IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ############͏︍͏︆͏󠄁
######################################################################