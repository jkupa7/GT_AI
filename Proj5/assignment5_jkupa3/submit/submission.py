
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###͏︍͏︆͏󠄁
#################################################
# file to edit: solution.ipynb͏︍͏︆͏󠄁

import numpy as np
from helper_functions import *

def get_initial_means(array, k):
    """
    Picks k random points from the 2D array
    (without replacement) to use as initial
    cluster means

    params:
    array = numpy.ndarray[numpy.ndarray[float]] - m x n | datapoints x features

    k = int

    returns:
    initial_means = numpy.ndarray[numpy.ndarray[float]]
    """
    # TODO: finish this function͏︍͏︆͏󠄁
    m = array.shape[0]
    n = array.shape[1]
    k_mask = np.random.choice(m, k, replace=False)
    k_points = array[k_mask]
    return k_points
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

def k_means_step(X, k, means):
    """
    A single update/step of the K-means algorithm
    Based on a input X and current mean estimate,
    predict clusters for each of the pixels and
    calculate new means.
    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n | pixels x features (already flattened)
    k = int
    means = numpy.ndarray[numpy.ndarray[float]] - k x n

    returns:
    (new_means, clusters)
    new_means = numpy.ndarray[numpy.ndarray[float]] - k x n
    clusters = numpy.ndarray[int] - m sized vector
    """


    distances = ((X[:, None, :] - means[None, :, :]) ** 2).sum(axis=2)
    clusters = np.argmin(distances, axis=1)

    new_means = np.copy(means)
    for cluster_idx in range(k):
        cluster_points = X[clusters == cluster_idx]
        if cluster_points.shape[0] > 0:
            new_means[cluster_idx] = np.mean(cluster_points, axis=0)

    return new_means, clusters

    # TODO: finish this function͏︍͏︆͏󠄁
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

def k_means_segment(image_values, k=3, initial_means=None, max_iterations=100):
    """
    Separate the provided RGB values into
    k separate clusters using the k-means algorithm,
    then return an updated version of the image
    with the original values replaced with
    the corresponding cluster values.

    params:
    image_values = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - r x c x ch
    k = int
    initial_means = numpy.ndarray[numpy.ndarray[float]] or None

    returns:
    updated_image_values = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - r x c x ch
    """
    # TODO: finish this function͏︍͏︆͏󠄁
    if initial_means is None:
        initial_means = get_initial_means(image_values, k)

    flattened_matrix = flatten_image_matrix(image_values)
    m = image_values.shape[0]
    n = image_values.shape[1]
    ch = image_values.shape[2]


    means = initial_means
    prev_clusters = np.zeros(flattened_matrix.shape[0], dtype=int)
    same_cluster_count = 0


    for _ in range(max_iterations):
        means, clusters = k_means_step(flattened_matrix, k, means)

        if np.array_equal(clusters, prev_clusters):
            same_cluster_count += 1
            if same_cluster_count == 10:
                break
            print(f"Same cluster count: {same_cluster_count}")
        else:
            same_cluster_count = 0
        prev_clusters = clusters.copy()
    print("DONE")

    flattened_matrix = means[clusters]
    # Reshape the clusters back to the original image shape
    unflattened_matrix = unflatten_image_matrix(flattened_matrix, n)

    return unflattened_matrix

    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

"""
Make sure to put #export (first line in this cell) only
if you call/use this function elsewhere in the code
"""

def compute_sigma(X, MU):
    """
    Calculate covariance matrix, based in given X and MU values

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n

    returns:
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    """
    m, n = X.shape
    k = MU.shape[0]
    sigma = np.zeros((k, n, n))

    for i in range(k):
        diff = X - MU[i]
        sigma[i] = np.dot(diff.T, diff) / m

    return sigma


########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

def initialize_parameters(X, k):
    """
    Return initial values for training of the GMM
    Set component mean to a random
    pixel's value (without replacement),
    based on the mean calculate covariance matrices,
    and set each component mixing coefficient (PIs)
    to a uniform values
    (e.g. 4 components -> [0.25,0.25,0.25,0.25]).

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int

    returns:
    (MU, SIGMA, PI)
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k
    """
    # TODO: finish this function͏︍͏︆͏󠄁
    def get_initial_means(array, k):
        m = array.shape[0]
        n = array.shape[1]
        k_mask = np.random.choice(m, k, replace=False)
        k_points = array[k_mask]
        return k_points

    MU = get_initial_means(X, k)
    PI = np.ones(k) / k
    SIGMA = compute_sigma(X, MU)
    return MU, SIGMA, PI

    # Hint: for initializing SIGMA you could choose to use compute_sigma͏︍͏︆͏󠄁
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

def prob(x, mu, sigma):
    """Calculate the probability of x (a single
    data point or an array of data points) under the
    component with the given mean and covariance.
    The function is intended to compute multivariate
    normal distribution, which is given by N(x;MU,SIGMA).

    params:
    x = numpy.ndarray[float] (for single datapoint)
        or numpy.ndarray[numpy.ndarray[float]] (for array of datapoints)
    mu = numpy.ndarray[float]
    sigma = numpy.ndarray[numpy.ndarray[float]]

    returns:
    probability = float (for single datapoint)
                or numpy.ndarray[float] (for array of datapoints)
    """
    # TODO: finish this function͏︍͏︆͏󠄁
    x = np.atleast_2d(x)
    d = mu.shape[0]

    determinate = np.linalg.det(sigma)
    inverse = np.linalg.inv(sigma)

    diff = x - mu
    exponent = -0.5 * np.sum(diff @ inverse * diff, axis=1)

    norm_const = 1.0 / np.sqrt(((2 * np.pi) ** d) * determinate)

    densities = norm_const * np.exp(exponent)

    #edge case
    if densities.shape[0] == 1:
        return densities[0]
    return densities

    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

def E_step(X,MU,SIGMA,PI,k):
    """
    E-step - Expectation
    Calculate responsibility for each
    of the data points, for the given
    MU, SIGMA and PI.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k
    k = int

    returns:
    responsibility = numpy.ndarray[numpy.ndarray[float]] - k x m
    """
    # TODO: finish this function͏︍͏︆͏󠄁
    m = X.shape[0]
    n = X.shape[1]
    det_SIGMA = np.linalg.det(SIGMA)
    inv_SIGMA = np.linalg.inv(SIGMA)

    diff = X[:, np.newaxis, :] - MU[np.newaxis, :, :]


    exponent_terms = np.zeros((m, k))
    for j in range(k):
        diff = X - MU[j]
        exponent_terms[:, j] = np.sum(diff * (diff.dot(inv_SIGMA[j])), axis=1)

    denom = np.sqrt((2 * np.pi)**X.shape[1] * det_SIGMA)
    probs = np.exp(-0.5 * exponent_terms) / denom

    weighted_probs = probs * PI

    responsibility = (weighted_probs / np.sum(weighted_probs, axis=1, keepdims=True)).T

    return responsibility

    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

def M_step(X, r, k):
    """
    M-step - Maximization
    Calculate new MU, SIGMA and PI matrices
    based on the given responsibilities.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    r = numpy.ndarray[numpy.ndarray[float]] - k x m
    k = int

    returns:
    (new_MU, new_SIGMA, new_PI)
    new_MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    new_SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    new_PI = numpy.ndarray[float] - k
    """
    # TODO: finish this function͏︍͏︆͏󠄁
    m = X.shape[0]
    n = X.shape[1]
    resp_sum = np.sum(r, axis=1)
    new_PI = resp_sum / m
    new_MU = np.dot(r, X) / resp_sum[:, np.newaxis]

    new_SIGMA = np.zeros((k, n, n))
    for cluster_idx in range(k):
        diff = X - new_MU[cluster_idx]
        weighted_diff = diff.T * r[cluster_idx]
        new_SIGMA[cluster_idx] = np.dot(weighted_diff, diff) / resp_sum[cluster_idx]
    return new_MU, new_SIGMA, new_PI
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

def likelihood(X, PI, MU, SIGMA, k):
    """Calculate a log likelihood of the
    trained model based on the following
    formula for posterior probability:

    log(Pr(X | mixing, mean, stdev)) = sum((i=1 to m), log(sum((j=1 to k),
                                      mixing_j * N(x_i | mean_j,stdev_j))))

    Make sure you are using natural log, instead of log base 2 or base 10.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k
    k = int

    returns:
    log_likelihood = float
    """
    # TODO: finish this function͏︍͏︆͏󠄁
    m = X.shape[0]
    n = X.shape[1]
    k = MU.shape[0]

    det_SIGMA = np.linalg.det(SIGMA)
    inv_SIGMA = np.linalg.inv(SIGMA)


    diff = X[:, np.newaxis, :] - MU[np.newaxis, :, :]

    exponent_terms = np.zeros((m, k))
    for cluster_idx in range(k):
        #(X - MU) * inv(SIGMA)
        temp = np.dot(diff[:, cluster_idx, :], inv_SIGMA[cluster_idx])
        exponent = np.sum(temp * diff[:, cluster_idx, :], axis=1)
        exponent_terms[:, cluster_idx] = exponent


    denominator = np.sqrt((2 * np.pi)**X.shape[1] * det_SIGMA)
    probs = np.exp(-0.5 * exponent_terms) / denominator
    weighted_probs = probs * PI  # shape: (m, k)
    likelihood_sum = np.sum(weighted_probs, axis=1)  # shape: (m,)

    log_likelihood = np.sum(np.log(likelihood_sum))

    return log_likelihood

    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

def train_model(X, k, convergence_function, initial_values = None):
    """
    Train the mixture model using the
    expectation-maximization algorithm.
    E.g., iterate E and M steps from
    above until convergence.
    If the initial_values are None, initialize them.
    Else it's a tuple of the format (MU, SIGMA, PI).
    Convergence is reached when convergence_function
    returns terminate as True,
    see default convergence_function example
    in `helper_functions.py`

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int
    convergence_function = func
    initial_values = None or (MU, SIGMA, PI)

    returns:
    (new_MU, new_SIGMA, new_PI, responsibility)
    new_MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    new_SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    new_PI = numpy.ndarray[float] - k
    responsibility = numpy.ndarray[numpy.ndarray[float]] - k x m
    """
    # TODO: finish this function͏︍͏︆͏󠄁
    print("INITIALIZING PARAMETERS")
    if initial_values is None:
        MU, SIGMA, PI = initialize_parameters(X, k)
    else:
        MU, SIGMA, PI = initial_values

    m = X.shape[0]
    n = X.shape[1]
    print("STARTING TRAINING")

    prev_likelihood = float('-inf')
    count = 0
    while True:
        print("IN WHILE LOOP")
        resp = E_step(X, MU, SIGMA, PI, k)
        MU, SIGMA, PI = M_step(X, resp, k)
        log_likelihood = likelihood(X, PI, MU, SIGMA, k)

        count, convergence_reached = convergence_function(new_likelihood=log_likelihood, prev_likelihood=prev_likelihood, conv_ctr=count)
        if convergence_reached:
            break
        print(f"Iteration {count}: log-likelihood = {log_likelihood}")
        prev_likelihood = log_likelihood
    return MU, SIGMA, PI, resp

    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

def cluster(r):
    """
    Based on a given responsibilities matrix
    return an array of cluster indices.
    Assign each datapoint to a cluster based,
    on component with a max-likelihood
    (maximum responsibility value).

    params:
    r = numpy.ndarray[numpy.ndarray[float]] - k x m - responsibility matrix

    return:
    clusters = numpy.ndarray[int] - m x 1
    """
    # TODO: finish this͏︍͏︆͏󠄁
    return np.argmax(r, axis=0)
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

def segment(X, MU, k, r):
    """
    Segment the X matrix into k components.
    Returns a matrix where each data point is
    replaced with its max-likelihood component mean.
    E.g., return the original matrix where each pixel's
    intensity replaced with its max-likelihood
    component mean. (the shape is still mxn, not
    original image size)

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    k = int
    r = numpy.ndarray[numpy.ndarray[float]] - k x m - responsibility matrix

    returns:
    new_X = numpy.ndarray[numpy.ndarray[float]] - m x n
    """
    # TODO: finish this f   unction͏︍͏︆͏󠄁
    clusters = cluster(r)
    new_X = MU[clusters]
    return new_X

    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

def best_segment(X,k,iters):
    """Determine the best segmentation
    of the image by repeatedly
    training the model and
    calculating its likelihood.
    Return the segment with the
    highest likelihood.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int
    iters = int

    returns:
    (likelihood, segment)
    likelihood = float
    segment = numpy.ndarray[numpy.ndarray[float]]
    """
    best_likelihood = float('-inf')
    best_segment = None
    best_MU, best_SIGMA, best_PI, best_resp = None, None, None, None


    for epoch in range(iters):
        initial_values = initialize_parameters(X, k)
        MU, SIGMA, PI, r = train_model(X, k, default_convergence, initial_values=initial_values)
        cur_likelihood = likelihood(X, PI, MU, SIGMA, k)

        # Check if this is the best likelihood so far
        if cur_likelihood > best_likelihood:
            best_likelihood = cur_likelihood
            best_MU, best_SIGMA, best_PI, best_r = MU, SIGMA, PI, r

    best_segment = segment(X, best_MU, k, best_r)
    return best_likelihood, best_segment
    # TODO: finish this function͏︍͏︆͏󠄁
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

def improved_initialization(X,k):
    """
    Initialize the training
    process by setting each
    component mean using some algorithm that
    you think might give better means to start with,
    based on the mean calculate covariance matrices,
    and set each component mixing coefficient (PIs)
    to a uniform values
    (e.g. 4 components -> [0.25,0.25,0.25,0.25]).

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int

    returns:
    (MU, SIGMA, PI)
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k
    """

    m, n = X.shape
    means = np.zeros((k, n))

    #pick first mean
    means[0] = X[np.random.choice(m)]

    for i in range(1, k):
        distances = np.min(np.linalg.norm(X[:, np.newaxis] - means[:i], axis=2)**2, axis=1)
        probabilities = distances / np.sum(distances)
        means[i] = X[np.random.choice(m, p=probabilities)]


    SIGMA = np.array([np.eye(n) for _ in range(k)])
    PI = np.ones(k) / k

    convergence_fn = lambda *, new_likelihood, prev_likelihood, conv_ctr: default_convergence(prev_likelihood, new_likelihood, conv_ctr, conv_ctr_cap=1)
    MU, SIGMA, PI, _ = train_model(X, k, convergence_function=convergence_fn, initial_values=(means, SIGMA, PI))

    return MU, SIGMA, PI

    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

def new_convergence_function(previous_variables, new_variables, conv_ctr,
                             conv_ctr_cap=5):
    """
    Convergence function
    based on parameters:
    when all variables vary by
    less than 10% from the previous
    iteration's variables, increase
    the convergence counter.

    params:
    previous_variables = [numpy.ndarray[float]]
                         containing [means, variances, mixing_coefficients]
    new_variables = [numpy.ndarray[float]]
                    containing [means, variances, mixing_coefficients]
    conv_ctr = int
    conv_ctr_cap = int

    return:
    (conv_crt, converged)
    conv_ctr = int
    converged = boolean
    """
    # TODO: finish this function͏︍͏︆͏󠄁
    if previous_variables is None or new_variables is None:
        return conv_ctr, False
    means, variances, mix_coefs = previous_variables
    new_means, new_variances, new_mix_coefs = new_variables
    means_diff = np.abs(means - new_means) / np.abs(means)
    variances_diff = np.abs(variances - new_variances) / np.abs(variances)
    mix_coefs_diff = np.abs(mix_coefs - new_mix_coefs) / np.abs(mix_coefs)
    if np.all(means_diff < 0.1) and np.all(variances_diff < 0.1) and np.all(mix_coefs_diff < 0.1):
        conv_ctr += 1
    else:
        conv_ctr = 0

    converged = conv_ctr >= conv_ctr_cap
    return conv_ctr, converged

def train_model_improved(X, k, convergence_function, initial_values = None):
    """
    Train the mixture model using the
    expectation-maximization algorithm.
    E.g., iterate E and M steps from
    above until convergence.
    If the initial_values are None, initialize them.
    Else it's a tuple of the format (MU, SIGMA, PI).
    Convergence is reached when convergence_function
    returns terminate as True. Use new_convergence_fuction
    implemented above.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int
    convergence_function = func
    initial_values = None or (MU, SIGMA, PI)

    returns:
    (new_MU, new_SIGMA, new_PI, responsibility)
    new_MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    new_SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    new_PI = numpy.ndarray[float] - k
    responsibility = numpy.ndarray[numpy.ndarray[float]] - k x m
    """
    # TODO: finish this function͏︍͏︆͏󠄁
    if initial_values is None:
        MU, SIGMA, PI = initialize_parameters(X, k)
    else:
        MU, SIGMA, PI = initial_values


    print("STARTING TRAINING")

    prev_variables = None
    count = 0
    while True:
        print("IN WHILE LOOP")
        resp = E_step(X, MU, SIGMA, PI, k)
        MU, SIGMA, PI = M_step(X, resp, k)
        new_variables = (MU, SIGMA, PI)

        count, convergence_reached = new_convergence_function(
    previous_variables=prev_variables, new_variables=new_variables,
    conv_ctr=count, conv_ctr_cap=3
)
        if convergence_reached:
            break
        #print(f"Iteration {count}: log-likelihood = {log_likelihood}")
        prev_variables = new_variables
    return MU, SIGMA, PI, resp
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
# Unittest below will check both of the functions at the same time.͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

def bayes_info_criterion(X, PI, MU, SIGMA, k):
    """
    See description above
    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k
    k = int

    return:
    bayes_info_criterion = int
    """
    # TODO: finish this function͏︍͏︆͏󠄁

    m = X.shape[0]
    n = X.shape[1]

    det_SIGMA = np.linalg.det(SIGMA)
    inv_SIGMA = np.linalg.inv(SIGMA)

    diff = X[:, np.newaxis, :] - MU[np.newaxis, :, :]
    exponent_terms = np.zeros((m, k))
    for cluster_idx in range(k):
        temp = np.dot(diff[:, cluster_idx, :], inv_SIGMA[cluster_idx])
        exponent = np.sum(temp * diff[:, cluster_idx, :], axis=1)
        exponent_terms[:, cluster_idx] = exponent

    lg_det_SIGMA = np.log(det_SIGMA)
    norm_const = -.5 * (n * np.log(2 * np.pi) + lg_det_SIGMA)

    lg_probs = norm_const - 0.5 * exponent_terms

    weighted_probs = np.exp(lg_probs) * PI
    likelihood_sum = np.sum(weighted_probs, axis=1)
    log_likelihood = np.sum(np.log(likelihood_sum))

    free_params = k * (n + n * (n + 1) / 2) + (k - 1)

    bic = free_params * np.log(m) - 2 * log_likelihood
    return int(bic)



    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︍͏︆͏󠄁

def BIC_likelihood_model_test(image_matrix, comp_means):
    """Returns the number of components
    corresponding to the minimum BIC
    and maximum likelihood with respect
    to image_matrix and comp_means.

    params:
    image_matrix = numpy.ndarray[numpy.ndarray[float]] - m x n
    comp_means = list(numpy.ndarray[numpy.ndarray[float]]) - list(k x n) (means for each value of k)

    returns:
    (n_comp_min_bic, n_comp_max_likelihood)
    n_comp_min_bic = int
    n_comp_max_likelihood = int
    """
    # TODO: finish this method͏︍͏︆͏󠄁

    min_bic = np.inf
    max_likelihood = -np.inf
    n_comp_min_bic = 0
    n_comp_max_likelihood = 0

    m, n = image_matrix.shape

    for means in comp_means:
        k = means.shape[0]

        # Initialize params
        MU = means.copy()
        SIGMA = np.array([np.cov(image_matrix, rowvar=False)] * k)
        PI = np.full(k, 1.0 / k)


        MU, SIGMA, PI, resp = train_model_improved(
            image_matrix, k, new_convergence_function, (MU, SIGMA, PI)
        )
        current_likelihood = likelihood(image_matrix, PI, MU, SIGMA, k)

        num_params = (k - 1) + (k * n) + (k * n * (n + 1) / 2)
        current_bic = -2 * current_likelihood + num_params * np.log(m)

        # Update minimum BIC
        if current_bic < min_bic:
            min_bic = current_bic
            n_comp_min_bic = k

        # Update maximum likelihood
        if current_likelihood > max_likelihood:
            max_likelihood = current_likelihood
            n_comp_max_likelihood = k

    return (n_comp_min_bic, n_comp_max_likelihood)

    raise NotImplementedError()
########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︆͏󠄃͏󠄌͏󠄍͏󠄂͏️͏󠄃͏󠄉͏︆͏︍͏︆͏󠄁
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︆͏󠄃͏󠄌͏󠄍͏󠄂͏️͏󠄃͏󠄉͏︆͏︍͏︆͏󠄁
################ END OF LOCAL TEST CODE SECTION ######################͏︆͏󠄃͏󠄌͏󠄍͏󠄂͏️͏󠄃͏󠄉͏︆͏︍͏︆͏󠄁

def return_your_name():
    return "Justin Kupa"
    # TODO: finish this͏︍͏︆͏󠄁
    raise NotImplemented()